Обучение
========

Курс "Основанное на FAIRroot программное обеспечение для симуляции, реконструкции и анализа физического эксперимента"
---------------------------------------------------------------------------------------------------------------------

**Целевая аудитория:** студены и молодые сотрудники – физики, начинающие работать с симуляциями и анализом

**Задача курса** – дать понимание структуры, функционала, архитектуры и взаимосвязи существующих пакетов Geant4, ROOT, FAIRroot и конкретные реализации последнего; сформировать умение пользоваться базовым функционалом указанных пакетов, а также умение модифицировать имеющееся описание установок с целью проведения конкретного исследования.

**Объем курса:** общая часть 8 (2 недели по 4 учебных пол-дня в неделю) занятий по 4 акад часа в компьютерном классе с преподавателем + самостоятельная работа.

**Предварительные требования:** знакомство со основными (список прилагается) понятиями C++ и умение читать код 

Пункты 0, 1 – лекционные, остальные с примерами

Литература
~~~~~~~~~~

#. http://www.twirpx.com/file/162809
#. http://www.twirpx.com/file/22656/

Минимальные требования знаний по С++:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Компилятор g++. Компиляция программы из одного или нескольких исходных файлов. http://knzsoft.ru/cpp-bgr-ls1/
#. Инструмент cmake. Написать текст по струтуре CMakeLists. Аннотированный пример.
#. Выражения: Основные типы. Инициализация переменных. Арифметические и логические операторы. Инкрементация и декрементация. Указатели. Операторы взятия адреса и разыменования.
#. Функции: Объявление. Определение. Вызов. Области видимости. Аргументы функции main.
#. Операторы: Условный оператор. Циклы. Операторы перехода: return, break, continue.
#. Массивы: Одномерные массивы, указатель на массив. Передача в функцию.
#. Ввод-вывод из stl. Консольный: cout, cin, cerr. Файловые потоки ввода-вывода.
#. Классы и объекты. Конструктор, деструктор, конструтктор копирования, методы, атрибуты. private и public. Статические члены класса. Указатель this. Передача объекта в функцию и возвращение из функции.
#. Наследование. Общее понимание.
#. Классы vector и map, list и их итераторы из stl. Ссылка.

Содержание курса
~~~~~~~~~~~~~~~~
0. Введение. Обзор базовых задач ПО для физ. эксперимента. (Моделирование, сбор данных, онлайн мониторинг и анализ, реконструкция, физический анализ) и существующих пакетов
1. Основы методологии использования ПО в физическом эксперименте

    1. Моделирование Monte Carlo-(генератор, геометрия, проведение частиц, физ процессы, отклик детектора, неидеальности, шумы, оцифровка, формирование вывода (что пишем)) 
    2. Сбор данных (детектор-аналоговое железо- цифровое железо, платы упаковки, концентрации и т.д., сеть для передачи, ввод в комп (сеть), на котором работает Daq софт (распаковка, переработка и сохранение), который м.б. интегрирован в фреймворк, но это не входит в курс.)
    3. Реконструкция (На вход либо реальные данные от DAQ софт, либо результат моделирования) 
    4. Анализ(интерактивный процесс комбинирования результатов реконструкции с целью решения физической задачи В результате анализа могут устояться процедуры, которые переносятся в реконструкцию)
    5. QA. Единый пример для илюстрации 1.3-1.5 – СГ + ОЛЯ

2. Физические пакеты и их взаимосвязь (то, что описано во введении, реализовано в нескольких фреймворках: Geant 4, Root и надстройки: FAIRroot, MaGe, GAUDI, (в какой-то мере) Go4…). Обзор популярных сценариев работы:

    1. geant4 root для анализа СГ, Вратислав
    2. Надстройки над Geant4
    3. ROOT + VMC +VGM
    4. FAIRroot и его воплощения *Схема от Виталика*

3. Geant4 - создание простой симуляции (самый простой способ сделать симуляцию + наличие подробного мануала)

    1. устройство Geant4 *СГ + ПШ*
    2. разбор примера B1

4. ROOT - знакомство  *ЕГОР*

    0. интерпертатор, макрос и TBrowser, TTreeViewer (простейшая схема работы с рутом для анализа root  файла, полученного в geant4)
    1. Ввод/Вывод (TFile, TTree, ...), коллекции данных, обработка нескольких файлов (TChain) 
    2. Графика (гистограммы и графики)
    3. Фитирование данных (function+smooth +spline)
    4. Математическая библиотека – обзор+ пример. *Пример с Виталика*
    5. Создание геометрии
    6. Создание собственной библиотеки классов для интерпретатора (Создание динамической библиотеки сюда входит)

5. FairRoot - разбор парадигм и подходов к решению типовых задач (Взять конкретный пример из FAIRroot. Вопрос о соотношении абстрактного и конкретного в рассказе этого куска?, Где рассказать о разных сущностях данных – пойнт, хит, трек…и базовых классах под разные типы хитов? Реконструкция – имеет ли смысл говорить что-то в общем, или только в разделе 5 по группам?) *Виталик*

    0. Особенности установки FAIRroot и совместимость версий подключаемых пакетов
    1.  Создание простой симуляции

        1. FairMCApplication
        2. VMC
        3. FairEventGenerator (Box, Ion, ...)
        4. Fair Event Display
        5. FairDetector (Создание своего класса)
        6. FairMCPoint
        7. FairIOManager

    2. Создание простой диджитизации
        
        1. FairTask
        2. Fair Run Time DataBase

6. ER *Виталик*

Методичка по "лайфхакам"
~~~~~~~~~~~~~~~~~~~~~~~~

#. G++. Компиляция испольняемого файла, статической библиотеки и динамической библиотеки. Добавление директорий для #include. Линковка с библиотеками.
#. Минимальный makefile

Расписание
~~~~~~~~~~

#. Введение +1) Основы методологии использования ПО в физическом эксперименте   1.5дня
#. Физические пакеты и их взаимосвязь​​​​​​  0.5 дня
#. geant4 ​​​​​​​​​​  1 (2?) дня
#. root​​​​​​​​​​​  2 дня 
#. FAIRRoot​​​​​​​​​​  3 (2?) дня


