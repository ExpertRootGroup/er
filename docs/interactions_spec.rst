Interactions
============

В большинстве рассматриваемых физических экспериментов требуется восстановить параметры одного из продуктов взаимодействия
по параметрам первичного иона и продуктов, наблюдаемых в детекторах.

Для физики низких энергий критически важна точность определения параметров первичного иона перед взаимодействием.
Этот факт не позволяет начать моделирование с процесса транспорта продуктов, а требует детального рассмотрения
процесса пропагации первичного иона с учетом рассеяния и энергопотерь в детекторе пучка и мишени.

Необходимость использования специфических моделей взаимодействий и их каскадов делает невозможным 
использование Монте-Карло пакетов общего назначения:

* Geant (https://geant4.web.cern.ch/) ;
* Pythia  (http://home.thep.lu.se/~torbjorn/Pythia.html) .

Interactions - подсистема er, отвечающая за имплементацию моделирования реакций и распадов в
в общую схему процесса симуляций экспериментов, наследованную из пакета FairRoot.
Задачи Interactions можно разделить на две группы:

* Реализация довольно простых моделей взаимодействий: 
	
	* Реакции 2 в 2
	* Распады, изотропные в ЦМ

но с существенно кастомизированными для задач физики низких энергий возможностями их параметризации;

* Реализация интерфейса между программными пакетами генерации событий, построенными на сложных теоретических моделях, и процессом симуляции всего эксперимента.

Ниже приведем иерархию классов подсистемы Interacions.

.. figure:: _images/interaction_classes.png
       :scale: 100 %
       :align: center
       :alt: Альтернативный текст

ERInteraction
-------------

ERInteraction - базовый класс, предоставляющий общий интерфейс и общую функциональность для реализации взаимодействий в ExpertRoot.
На этом уровне иерархии классов находятся данные и функциоальность, которые необходимы как для реакций, так и для распадов:

Данные:

* PDG коды входа(projectile), мишени(target) и выходов(ejectile). Необходимы для определения энергии основного состояния и розыгрыша изотропного распределения импульсов. Пропагацию projectilr отслеживаем до начала взаимодействия.
* Способ определения координаты взаимодействия:

	* Распределение координаты(Uniform, Exponential)
	* Распределение энергии, до которой пропагируется первичный ион

* Параметры для идентификации координаты взаимодействия:

	* Объём геометрии, в котором происходит взаимодействие;
	* Шаг транспорта внутри объема взаимодействия;

* Способ разыгрывания кинематики: изотропное, неизотропное

Функциональноть:

* Проверка входых данных
* Проверка, делаем ли взаимодействие на данном шаге 
* Остановка projectile трека
* Перевод выходов в лаб. СК
* Добавление выходов в стек треков

ERReaction2in2
++++++++++++++

Для всех реакций 2 в 2 подразумеваем, что один из участников до начала взаимодействия покоится
в лабораторной системе центра масс.

* Неизотропное распределение theta по CDF из файла (в  заданных диапазонах theta и phi)

ERReaction2in2Elastic
+++++++++++++++++++++

* Реализация упругой реакции 2 в 2

ERReaction2in2Inelastic
+++++++++++++++++++++++

* Надо прописывать конкретную физику "неупругости" - спектр возбуждения и, если есть, угловую зависимость этого спектра.

ERDecay
+++++++

* Способ определения координаты взаимодействия:
	* Время жизни иона

ERDecayIsotropy
+++++++++++++++

* Распределение энергии возбуждения входа (Возможно несколько с весами)

ERDecayExternal
+++++++++++++++

* Чтение результатов распада в ЦМ из внешнего файла

Последовательности взаимодействий
---------------------------------

В ERInteraction реализованы два способа задания посдедовательности взаимодействий:

* Подразумеваем, что дочернее взаимодействие происходит сразу за родительским. В таком случае
продукт родительского взаимодействия, который является входом для дочернего не транспортируется - трек для него не создается.
В таком случае способ опредления координаты второго взаимодействия задавать не надо.

* Подразумеваем, что продукт родительского взаимодействия неободимо транспортировать.

Для имплементации последовательностей взаимодействий,
необходима реализация конструктора взаимодействия, 
в параметры которого входит другое взаимодействие, номер его
выхода и флаг необходимости транспорта промежуточного продукта.

Примеры использования
---------------------

* Упругое рассеяние для N15B11

```

ERReaction2in2Elastic* reaction = new ERReaction2in2Elastic("15Nto15N11B");

reaction->AddProjectile(7,15,7);
reaction->AddTarget(5,11,5);

reaction->SetUniformPos(-0.00035,0.00035);
reaction->SetStep(0.00001); //0.1 micron
reaction->SetInteractionVolume("targetB11");

reaction->SetThetaCDF("cos_tetta_cross.txt");
reaction->SetThetaRange(20., 21.);
reaction->SetPhiRange(0., 0.);

```

* Каскад реакции и распада для 8He (пропагация промежуточного иона (7H) не выполняется):

	* 8He + 2H → 3He + 7H
	* 7H → 3H + n +n +n +n

```

  ERReaction2to2Ineleatic* reaction = ERReaction2to2Ineleatic("8He + 2H → 3He + 7H");
  
  reaction->AddEjectile(2,8,2);
  reaction->AddTarget(1,2,1);
  reaction->AddEjectile(2,3,2);
  reaction->AddEjectile(1,7,1,kNOTTRANSPORTED); //don`t added to Geant track stack

  reaction->AddEjectileExitation(1,0.0004, 0.00002355, 1); //exitation distribution for second ejectile
  reaction->AddEjectileExitation(1,0.0012, 0.0002355, 1);

  reaction->SetExponentialPos(...);
  reaction->SetStep(1e-5);
  reaction->SetInteractionVolume("boxCD");

  reaction->SetThetaCDF("cos_tetta_cross.txt");

  ERDecayIsotropy* decay = ERDecayIsotropy("7H → 3H + n +n +n +n", reaction,1)
  //second ejectile from parent reaction uses as projectile for decay

  decay->AddEjectile(1,3,1);
  decay->AddEjectile(2112);
  decay->AddEjectile(2112);
  decay->AddEjectile(2112);
  decay->AddEjectile(2112);

```